using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.Logging;
using Serious.Abbot.Infrastructure;
using Serious.Abbot.Messaging;
using Serious.Abbot.Repositories;
using Serious.Abbot.Signals;
using Serious.Abbot.Telemetry;
using Serious.Logging;

namespace Serious.Abbot.Entities;

/// <summary>
/// By default, a skill is only called when the message (after the @abbot mention or the shortcut character)
/// starts with the skill name. A pattern allows a skill to respond to messages that match a pattern such as
/// a regular expression.
/// </summary>
public class SkillPattern : TrackedEntityBase<SkillPattern>, ISkillChildEntity, IAuditableEntity, INamedEntity, IPattern
{
    static readonly ILogger<SkillPattern> Log = ApplicationLoggerFactory.CreateLogger<SkillPattern>();

    /// <summary>
    /// A friendly descriptive name for the pattern unique to the skill.
    /// </summary>
    public string Name { get; set; } = null!;

    /// <summary>
    /// A URL friendly slug used to identify and link to a Skill Pattern.
    /// </summary>
    /// <remarks>
    /// This is generated by us when creating or editing a pattern in <see cref="PatternRepository"/>.
    /// </remarks>
    public string Slug { get; set; } = null!;

    /// <summary>
    /// A description of the pattern.
    /// </summary>
    [NotMapped]
    public string Description => DescribePattern();

    /// <summary>
    /// The skill that this pattern calls.
    /// </summary>
    public Skill Skill { get; set; } = null!;

    /// <summary>
    /// The Id of the skill that this pattern calls.
    /// </summary>
    public int SkillId { get; set; }

    /// <summary>
    /// The type of pattern.
    /// </summary>
    public PatternType PatternType { get; set; }

    /// <summary>
    /// The pattern to match.
    /// </summary>
    public string Pattern { get; set; } = null!;

    /// <summary>
    /// Whether or not the pattern is case sensitive. By default, it is not.
    /// </summary>
    public bool CaseSensitive { get; set; }

    /// <summary>
    /// Whether or not the pattern is enabled. By default, it is.
    /// </summary>
    public bool Enabled { get; set; } = true;

    /// <summary>
    /// Allow members of external orgs to call a skill when matching this pattern.
    /// </summary>
    /// <remarks>
    /// By default, members of an external org (such as in a Slack Connect channel) cannot call a skill by matching
    /// a pattern. Set this to <c>true</c> to allow them to call the skill matched by this pattern.
    /// </remarks>
    public bool AllowExternalCallers { get; set; }

    /// <summary>
    /// Creates an audit event of a type specific to the entity.
    /// </summary>
    /// <param name="auditOperation">The type of audit event such as Created, Changed, or Removed.</param>
    public AuditEventBase CreateAuditEventInstance(AuditOperation auditOperation)
    {
        var description = $"{auditOperation} pattern `{Name}` for `{Skill}`. Pattern Type is {PatternType} with value `{Pattern}`";

        return new AuditEvent
        {
            Type = new("SkillPattern", auditOperation),
            Description = description
        };
    }

    /// <summary>
    /// Attempts to match the pattern against the message and returns true if it matches, otherwise false.
    /// </summary>
    /// <param name="message">The message to match against.</param>
    public bool Match(IPatternMatchableMessage message)
    {
        try
        {
            return PatternType.IsMatch(message.Text, Pattern, CaseSensitive);
        }
        catch (ArgumentException e)
        {
            // This should never happen because we validate patterns going in, but
            // just in case, let's be defensive about it.
            Log.ExceptionMatchingPattern(e, Pattern, Id, Skill.Id, Skill.Organization.PlatformId);
            return false;
        }
    }

    string DescribePattern()
    {
        if (PatternType is PatternType.None)
        {
            return "Does not match anything.";
        }
        var action = PatternType.Humanize();
        return $"`{Name}` matches messages that {action} `{Pattern}` - case {(CaseSensitive ? "sensitive" : "insensitive")}";
    }
}
