{"version":3,"sources":["webpack://serious-razor/./assets/markdown-editor/index.js","webpack://serious-razor/./assets/markdown-editor/js/markdown-editor.js"],"names":["document","addEventListener","querySelectorAll","forEach","tabContainer","preview","querySelector","emptyPreviewMessage","innerHTML","previewUrl","dataset","textarea","evt","selectedTab","detail","relatedTarget","tab","markdown","value","length","response","fetch","method","headers","body","JSON","stringify","ok","text","setupMarkdownTextAreas"],"mappings":"4IAGAA,SAASC,iBAAiB,oBAAoB,YCH/B,SAAgCD,GAC3CA,EAASE,iBAAiB,iBAAiBC,SAAQC,IAC/C,IAAMC,EAAUD,EAAaE,cAAc,oBACrCC,EAAsBF,EAAQG,UAC9BC,EAAaL,EAAaM,QAAQD,WAClCE,EAAWP,EAAaE,cAAc,YAE5CF,EAAaH,iBAAiB,wBAA9B,e,EAAA,G,EAAuD,UAAMW,GACzDR,EAAaM,QAAQG,YAAcD,EAAIE,OAAOC,cAAcL,QAAQM,IACpE,IAAMC,EAAWN,EAASO,MAC1B,GAAyC,YAArCd,EAAaM,QAAQG,YACrB,GAAII,EAASE,OAAS,EAAG,CACrB,IAAMC,QAAiBC,MAAMZ,EAAY,CACrCa,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,KAErBG,EAASO,GACTtB,EAAQG,gBAAkBY,EAASQ,OAGnCvB,EAAQG,UAAY,wDAIxBH,EAAQG,UAAYD,G,+KArBhC,0DDFJsB,CAAuB7B,c","file":"markdown-editor.js","sourcesContent":["import './index.scss';\nimport setupMarkdownTextAreas from './js/markdown-editor';\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Apply Markdown Text Area.\n    setupMarkdownTextAreas(document);\n});","export default function setupMarkdownTextAreas(document) {\n    document.querySelectorAll('tab-container').forEach(tabContainer => {\n        const preview = tabContainer.querySelector('.preview-content');\n        const emptyPreviewMessage = preview.innerHTML;\n        const previewUrl = tabContainer.dataset.previewUrl;\n        const textarea = tabContainer.querySelector('textarea');\n\n        tabContainer.addEventListener('tab-container-changed', async evt => {\n            tabContainer.dataset.selectedTab = evt.detail.relatedTarget.dataset.tab;\n            const markdown = textarea.value;\n            if (tabContainer.dataset.selectedTab === 'preview') {\n                if (markdown.length > 0) {\n                    const response = await fetch(previewUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(markdown)\n                    });\n                    if (response.ok) {\n                        preview.innerHTML = await response.text();\n                    }\n                    else {\n                        preview.innerHTML = 'Sorry, there was a problem fetching the preview.'\n                    }\n\n                } else {\n                    preview.innerHTML = emptyPreviewMessage\n                }\n            }\n        })\n    });\n}\n"],"sourceRoot":""}