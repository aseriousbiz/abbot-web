@page "/skills/{skill}/subscriptions"
@model Serious.Abbot.Pages.Skills.Subscriptions.IndexPageModel
@{
    ViewContext.SetPageInfo("Signals", "Signal List", "Signals");
}
<div class="sm:flex items-start mx-1 my-2">
    <div class="border border-gray-200 bg-gray-100 mx-1 text-sm flex-grow-0 sm:w-1/4 mt-2 sm:mt-0">
        <div class="border-b bg-white p-2">
            <header class="bg-blue-500 px-2">
                <h1 class="text-white">
                    Skill:
                    <span>@Model.SkillName</span>
                </h1>
            </header>

            <nav>
                <ul class="m-2 font-mono" role="tablist">
                    <li class="mb-1">
                        Code
                    </li>

                    <li class="mb-1">
                        <a class="font-mono text-blue-500 hover:text-gray-700"
                           asp-page="../Activity/Index"
                           asp-route-skill="@Model.SkillName">
                            View activity
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <div class="flex-grow">
        <section class="border border-gray-200 mx-1 mt-2 sm:mt-0">
            <header class="px-2 m-2 bg-blue-50">
                <h1 class="text-sm">
                    Skill editor
                </h1>
            </header>

            <partial name="_StatusMessage" model="Model.StatusMessage" />

            <partial name="Skills/_SkillNavigationTabs" model="Model.Skill" />

            <section class="m-4">
                <header>
                    <div class="max-w-3xl mb-2">
                        <h2 class="font-bold text-lg">
                            Signals
                        </h2>
                        <p class="mb-2">
                            Signals allow skills to handle important events in the system. Skills can also raise signals that are handled by other skills.
                        </p>
                    </div>

                    <div class="sm:flex items-center">
                        @if (Model.CanEdit) {
                            <skilllink class="btn" asp-page="Create">Create Subscription</skilllink>
                        } else {
                            <button class="btn btn-disabled" disabled>Create Subscription</button>
                        }

                        <div class="sm:ml-auto text-sm">
                            @if (!Model.CanEdit) {
                                <p class="text-right text-yellow-900 bg-yellow-100 rounded px-2">
                                    <span class="font-mono font-bold text-xs">Edit</span>
                                    permission for the
                                    <span class="font-bold">
                                        @Model.SkillName
                                    </span>
                                    modify signal subscriptions.
                                    <partial name="Shared/_PermissionTooltip" model="Model.SkillName"/>
                                </p>
                            }
                        </div>
                    </div>
                </header>

                <section class="my-4">
                    <div class="flex rounded-lg px-4 py-1 border flex text-sm font-bold" aria-hidden="true">
                        <div>Signal</div>
                    </div>

                    <div class="mb-4 divide-y">
                        @if (Model.Subscriptions.Any()){
                            @foreach (var subscription in Model.Subscriptions) {
                                <div class="p-4 max-w-5xl">
                                    <div class="sm:flex items-center">
                                        <h2 class="mb-1 font-mono bg-gray-100 max-w-screen-sm px-2 py-1 rounded-lg inline-block text-black">
                                            @subscription.Name
                                        </h2>

                                        @if (subscription.ArgumentsPattern is { Length: > 0 } pattern && subscription.ArgumentsPatternType != PatternType.None) {
                                            <div class="mb-1 font-mono ml-2 max-w-screen-sm text-xs px-2 py-1 inline-block text-gray-500 uppercase">
                                                    When arguments @subscription.ArgumentsPatternType.Humanize() <code>@pattern</code>
                                            </div>
                                        }

                                        <div class="ml-auto sm:pl-4 flex">
                                            <div class="flex items-center">
                                                <span class="mr-1 text-gray-500">
                                                    Created by
                                                </span>
                                                <partial name="Shared/_AvatarWithUserName" model="@subscription.Creator"/>
                                            </div>

                                            @if (Model.CanEdit)
                                            {
                                                <div class="ml-2">
                                                    <skilllink asp-page="Delete" class="ml-2 btn btn-danger" asp-route-name="@subscription.Name">
                                                        Delete
                                                    </skilllink>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        } else {
                            <div class="border border-gray-100 rounded overflow-hidden mt-2">
                                <blankslate>
                                    <span class="text-gray-500">
                                        This skill is not subscribed to any signals.
                                    </span>
                                </blankslate>
                            </div>
                        }
                    </div>
                </section>
            </section>
        </section>
    </div>
</div>
