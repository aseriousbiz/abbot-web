@model Serious.Abbot.Pages.Activity.DetailsModel

@{
    var auditEvent = Model.AuditEvent as SkillRunAuditEvent
                     ?? throw new InvalidOperationException($"AuditEvent is not a {nameof(SkillRunAuditEvent)}.");
    bool success = auditEvent.ErrorMessage is null or {Length: 0};
    var displayRoom = auditEvent.Room is { Length:> 0 } && auditEvent.Room[0] != '#'
        ? $"#{auditEvent.Room}"
        : auditEvent.Room;
    bool legacyEvent = auditEvent.Code is null; // Event created before we had a SkillRunAuditEvent type.
    var properties = auditEvent.ReadProperties<SkillRunProperties>();
}

<div class="p-4">
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div>
            <h2 class="font-semibold text-sm mb-1">Skill</h2>
            <partial name="Shared/Activity/_SkillDetails"/>
        </div>

        <div class="col-span-2">
            <h2 class="font-semibold text-sm mb-1">
                @if (auditEvent.PatternDescription is null) {
                    <text>Arguments</text>
                }
                else {
                    <text>Message</text>
                }
            </h2>
            <p class="flex flex-col items-start gap-2">
                @if (auditEvent.Arguments is { Length: > 0}) {
                    <code>@auditEvent.Arguments</code>
                }
                else {
                    <span class="text-gray-500">No arguments specified</span>
                }
                @if (properties is {ArgumentRecognitionResult: not null}) {
                    <em>Extracted by <i class="fa fa-robot"></i> AI from the message:</em>
                    <code>@(properties.CommandText)</code>
                }
            </p>
        </div>

        <div>
            <h2 class="font-semibold text-sm mb-1">Outcome</h2>
            <p>
                @if (success) {
                    <span class="text-green-500">Success</span>
                } else {
                    <span class="text-red-500">Failed</span>
                }
            </p>
        </div>

        <div>
            <h2 class="font-semibold text-sm mb-1">Channel</h2>
            <div>
                @if (displayRoom is { Length: > 0 }) {
                    <text>@displayRoom</text>
                } else {
                    <span class="text-gray-500">Unknown</span>
                }
            </div>
        </div>

        <div>
            <h2 class="font-semibold text-sm mb-1">Language</h2>
            <div>
                @if (!legacyEvent) {
                    <text>@auditEvent.Language.Humanize()</text>
                }
                else {
                    <em>Unknown</em>
                }
            </div>
        </div>

        <div>
            <h2 class="font-semibold text-sm mb-1">Secrets</h2>
            <div>
                @if (auditEvent.Secrets is {Length: > 0}) {
                    <markdown>@auditEvent.Secrets</markdown>
                }
                else {
                    if (!legacyEvent) {
                        <span class="text-gray-500">None</span>
                    }
                    else {
                        <span class="text-gray-500">Unknown</span>
                    }
                }
            </div>
        </div>

        @if (Model.AuditEvent.ErrorMessage is not null) {
            <div class="col-span-3">
                <h2 class="font-semibold text-sm mb-1">Error Message</h2>
                <pre class="overflow-auto">@auditEvent.ErrorMessage</pre>
            </div>
        }
    </div>
    <div class="col-span-3">
        <partial name="Shared/Activity/_SkillCodeDetail"/>
    </div>
    @if (properties is { ArgumentRecognitionResult: {} recognitionResult }) {
        <div staff-only>
            <h2 class="font-semibold text-sm mb-1">Argument Extraction Prompt <i class="fa fa-shield-quartered"></i></h2>
            <pre class="overflow-auto h-48">@recognitionResult.Prompt.Reveal()</pre>
            <span>@recognitionResult.TokenUsage.PromptTokenCount tokens, processed in @recognitionResult.ProcessingTime.TotalSeconds seconds</span>
        </div>
    }
</div>
