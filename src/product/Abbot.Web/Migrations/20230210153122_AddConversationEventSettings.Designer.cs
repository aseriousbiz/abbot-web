// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Serious.Abbot.Entities;

#nullable disable

namespace Serious.Abbot.Migrations
{
    [DbContext(typeof(AbbotContext))]
    [Migration("20230210153122_AddConversationEventSettings")]
    partial class AddConversationEventSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConversationMember", b =>
                {
                    b.Property<int>("AssignedConversationsId")
                        .HasColumnType("integer");

                    b.Property<int>("AssigneesId")
                        .HasColumnType("integer");

                    b.HasKey("AssignedConversationsId", "AssigneesId");

                    b.HasIndex("AssigneesId");

                    b.ToTable("ConversationMember");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("TargetArguments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetSkill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Name", "OrganizationId")
                        .IsUnique();

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCompletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScheduledJobId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAsBot")
                        .HasColumnType("boolean");

                    b.Property<string>("SourceMessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceRoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SourceRoomId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AnnouncementMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("RoomId", "AnnouncementId")
                        .IsUnique();

                    b.ToTable("AnnouncementMessages");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ApiKey", (string)null);
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AuditEventBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActorMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("SerializedProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("Properties");

                    b.Property<bool>("StaffOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("TraceId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorMemberId");

                    b.HasIndex("Discriminator");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AuditEventBase");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Cohort", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.ToTable("Cohort", null, t => t.ExcludeFromMigrations());

                    b.ToView(null);
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchivedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstMessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstResponseOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HubId")
                        .HasColumnType("integer");

                    b.Property<string>("HubThreadId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ImportedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastMessagePostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastStateChangeOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("StartedById")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimeToRespondWarningNotificationSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StartedById");

                    b.HasIndex("RoomId", "FirstMessageId")
                        .IsUnique();

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("MessageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("MemberId");

                    b.ToTable("ConversationEvents");

                    b.HasDiscriminator<string>("Type").HasValue("ConversationEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Settings")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId", "LinkType", "ExternalId")
                        .IsUnique();

                    b.ToTable("ConversationLinks");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedConversationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastPostedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ConversationId", "MemberId")
                        .IsUnique();

                    b.ToTable("ConversationMembers");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationTag", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId", "TagId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TagId");

                    b.ToTable("ConversationTag");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.DailyMetricsRollup", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActiveUserCount")
                        .HasColumnType("integer");

                    b.Property<int>("InteractionCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonthlyRecurringRevenue")
                        .HasColumnType("numeric");

                    b.Property<int>("OrganizationCreatedCount")
                        .HasColumnType("integer");

                    b.Property<int>("SkillCreatedCount")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedCount")
                        .HasColumnType("integer");

                    b.HasKey("Date");

                    b.ToTable("DailyMetricsRollups");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId", "Key")
                        .IsUnique();

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Hub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("OrganizationId", "RoomId")
                        .IsUnique();

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.HubRoutingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HubId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoomId");

                    b.ToTable("HubRoutingRules");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Type");

                    b.HasIndex("Type", "ExternalId")
                        .IsUnique();

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.LinkedIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("ExternalName")
                        .HasColumnType("text");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.HasKey("Id");

                    b.HasIndex("MemberId", "OrganizationId", "Type")
                        .IsUnique();

                    b.HasIndex("OrganizationId", "Type", "ExternalId")
                        .IsUnique();

                    b.ToTable("LinkedIdentities");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("AccessRequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InvitationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaultEscalationResponder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultFirstResponder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry (point)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<bool>("PlatformAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Welcomed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MemberFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SubjectId");

                    b.ToTable("MemberFacts");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MemberRole", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MemberRole");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MetadataField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("MetadataFields");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MetricObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<string>("Metric")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoomId");

                    b.HasIndex("Metric", "Timestamp");

                    b.ToTable("MetricObservations");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApiEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ApiToken")
                        .HasColumnType("text");

                    b.Property<bool>("AutoApproveUsers")
                        .HasColumnType("boolean");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotAppId")
                        .HasColumnType("text");

                    b.Property<string>("BotAppName")
                        .HasColumnType("text");

                    b.Property<string>("BotAvatar")
                        .HasColumnType("text");

                    b.Property<string>("BotName")
                        .HasColumnType("text");

                    b.Property<string>("BotResponseAvatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<RoomSettings>("DefaultRoomSettings")
                        .HasColumnType("jsonb");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("DotNetEndpoint")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("EnterpriseGridId")
                        .HasColumnType("text");

                    b.Property<bool>("FallbackResponderEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("InkEndpoint")
                        .HasColumnType("text");

                    b.Property<string>("JavaScriptEndpoint")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastPlatformUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<string>("PlatformBotId")
                        .HasColumnType("text");

                    b.Property<string>("PlatformBotUserId")
                        .HasColumnType("text");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlatformType")
                        .HasColumnType("integer");

                    b.Property<int>("PurchasedSeatCount")
                        .HasColumnType("integer");

                    b.Property<string>("PythonEndpoint")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<char>("ShortcutCharacter")
                        .HasColumnType("character(1)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<bool>("TrialEligible")
                        .HasColumnType("boolean");

                    b.Property<bool>("UserSkillsEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId")
                        .IsUnique();

                    b.HasIndex("PlatformType");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<bool>("Listed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Readme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("UsageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SkillId")
                        .IsUnique();

                    b.HasIndex("SkillId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeCacheKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("integer");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("integer");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int>("PatchVersion")
                        .HasColumnType("integer");

                    b.Property<string>("ReleaseNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Permission", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("Capability")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SkillId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SkillId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Archived")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BotIsMember")
                        .HasColumnType("boolean");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPlatformUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ManagedConversationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Persistent")
                        .HasColumnType("boolean");

                    b.Property<string>("PlatformRoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<RoomSettings>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("Shared")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "PlatformRoomId")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RoomId", "Role", "MemberId")
                        .IsUnique();

                    b.ToTable("RoomAssignments");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomLinks");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomMetadataField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("MetadataFieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MetadataFieldId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RoomId", "MetadataFieldId")
                        .IsUnique();

                    b.ToTable("RoomMetadataField");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Scope", "Name")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SignalSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SkillId");

                    b.HasIndex("Name", "SkillId")
                        .IsUnique();

                    b.ToTable("SignalSubscriptions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Restricted")
                        .HasColumnType("boolean");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SourcePackageVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("UsageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SourcePackageVersionId");

                    b.HasIndex("Name", "OrganizationId")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContextId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("SkillId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SkillId");

                    b.HasIndex("Key", "SkillId", "Scope", "ContextId")
                        .IsUnique();

                    b.ToTable("SkillData");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowExternalCallers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CaseSensitive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatternType")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SkillId");

                    b.HasIndex("Name", "SkillId")
                        .IsUnique();

                    b.HasIndex("Slug", "SkillId")
                        .IsUnique();

                    b.ToTable("SkillPatterns");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeyVaultSecretName")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("character varying(127)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("character varying(127)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("KeyVaultSecretName")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SkillId");

                    b.HasIndex("Name", "SkillId")
                        .IsUnique();

                    b.ToTable("SkillSecrets");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillTrigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SkillId");

                    b.HasIndex("RoomId", "SkillId", "TriggerType")
                        .IsUnique()
                        .HasFilter("\"RoomId\" IS NOT NULL");

                    b.ToTable("SkillTriggers");

                    b.HasDiscriminator<string>("TriggerType").HasValue("SkillTrigger");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool?>("Restricted")
                        .HasColumnType("boolean");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("UsageText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillVersions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SlackEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("SlackEvents");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SlackEventsRollup", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("integer");

                    b.Property<int>("IncompleteCount")
                        .HasColumnType("integer");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("integer");

                    b.HasKey("Date", "EventType", "TeamId");

                    b.HasIndex("Date");

                    b.ToTable("SlackEventsRollups");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsAbbot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean");

                    b.Property<string>("NameIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("PlatformUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<string>("SlackTeamId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NameIdentifier")
                        .IsUnique();

                    b.HasIndex("PlatformUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UserList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Name", "OrganizationId")
                        .IsUnique();

                    b.ToTable("UserLists");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UserListEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ListId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserListEntry");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AttachedToHubEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.Property<int>("HubId")
                        .HasColumnType("integer");

                    b.HasIndex("HubId");

                    b.HasDiscriminator().HasValue("AttachedToHubEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.AuditEventBase");

                    b.Property<bool>("StaffPerformed")
                        .HasColumnType("boolean");

                    b.Property<string>("StaffReason")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Type");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("AuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ExternalLinkEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.Property<int>("LinkId")
                        .HasColumnType("integer");

                    b.HasIndex("LinkId");

                    b.HasDiscriminator().HasValue("ExternalLink");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.LegacyAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.AuditEventBase");

                    b.Property<string>("Room")
                        .HasColumnType("text")
                        .HasColumnName("Room");

                    b.Property<string>("RoomId")
                        .HasColumnType("text")
                        .HasColumnName("RoomId");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("LegacyAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MessagePostedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.Property<string>("ExternalAuthor")
                        .HasColumnType("text");

                    b.Property<string>("ExternalAuthorId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalMessageId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalSource")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("MessagePosted");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillHttpTrigger", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillTrigger");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ApiToken")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SkillHttpTrigger");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillScheduledTrigger", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillTrigger");

                    b.Property<string>("Arguments")
                        .HasColumnType("text");

                    b.Property<string>("CronSchedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("SkillScheduledTrigger");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SlackImportEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.HasDiscriminator().HasValue("SlackImportEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.StateChangedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.Property<bool>("Implicit")
                        .HasColumnType("boolean");

                    b.Property<string>("NewState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StateChanged");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UnknownConversationEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.ConversationEvent");

                    b.HasDiscriminator().HasValue("");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AdminAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("AdminAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AnnouncementEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("AnnouncementEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.BillingEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text");

                    b.Property<string>("BillingName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("text");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("BillingEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.BuiltInSkillRunEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Arguments");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("SkillName");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("BuiltInSkillRunEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationLinkedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ExternalId");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("LinkType");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("ConversationLinkedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationTitleChangedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("ConversationTitleChangedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.FormAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("FormAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.HubAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("HubAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomLinkedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ExternalId");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("LinkType");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("RoomLinkedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomUnlinkedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ExternalId");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("LinkType");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("RoomUnlinkedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SettingAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SettingAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("SkillName");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillNotFoundEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Response");

                    b.Property<int>("ResponseSource")
                        .HasColumnType("integer");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillNotFoundEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.StaffAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.LegacyAuditEvent");

                    b.Property<string>("Code")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("StaffAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.InstallationEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.AdminAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("InstallationEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.PackageEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<int?>("PackageVersionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("FirstSkillVersionId");

                    b.Property<string>("Readme")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Arguments");

                    b.Property<string>("ReleaseNotes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("PackageEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomRespondersChangedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.AdminAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("RoomRespondersChangedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomResponseTimesChangedEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.AdminAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("RoomResponseTimesChangedEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillEditSessionAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<string>("Code")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<int>("EditCount")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstSkillVersionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("FirstSkillVersionId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillEditSessionAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillInfoChangedAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ChangeDescription");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<string>("NewUsage")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Arguments");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillInfoChangedAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillRunAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Arguments");

                    b.Property<string>("Code")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<string>("PatternDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.Property<string>("Secrets")
                        .HasColumnType("text")
                        .HasColumnName("Secrets");

                    b.Property<string>("Signal")
                        .HasColumnType("text");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillRunAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillSecretEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<string>("KeyVaultName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<string>("SecretDescription")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ChangeDescription");

                    b.Property<int>("SecretId")
                        .HasColumnType("integer");

                    b.Property<string>("SecretName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("SkillSecretEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.StaffViewedCodeAuditEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.StaffAuditEvent");

                    b.Property<Guid>("ViewedIdentifier")
                        .HasColumnType("uuid")
                        .HasColumnName("ViewedIdentifier");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("StaffViewedCodeAuditEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.StaffViewedSlackEventContent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.StaffAuditEvent");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("StaffViewedSlackEventContent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.TriggerChangeEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillAuditEvent");

                    b.Property<string>("TriggerDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ChangeDescription");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("TriggerChangeEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.HttpTriggerChangeEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.TriggerChangeEvent");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Url");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("HttpTriggerChangeEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ScheduledTriggerChangeEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.TriggerChangeEvent");

                    b.Property<string>("CronSchedule")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("CronSchedule");

                    b.Property<string>("TimeZoneId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("TimeZoneId");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("ScheduledTriggerChangeEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.TriggerRunEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.SkillRunAuditEvent");

                    b.Property<string>("TriggerDescription")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ChangeDescription");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("TriggerRunEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.HttpTriggerRunEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.TriggerRunEvent");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Response");

                    b.Property<string>("ResponseContentType")
                        .HasColumnType("text");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("text");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("Url");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("HttpTriggerRunEvent");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ScheduledTriggerRunEvent", b =>
                {
                    b.HasBaseType("Serious.Abbot.Entities.TriggerRunEvent");

                    b.Property<string>("CronSchedule")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("CronSchedule");

                    b.Property<string>("TimeZoneId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("TimeZoneId");

                    b.ToTable("AuditEvents");

                    b.HasDiscriminator().HasValue("ScheduledTriggerRunEvent");
                });

            modelBuilder.Entity("ConversationMember", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", null)
                        .WithMany()
                        .HasForeignKey("AssignedConversationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Alias", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Announcement", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "SourceRoom")
                        .WithMany()
                        .HasForeignKey("SourceRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("SourceRoom");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AnnouncementMessage", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Announcement", "Announcement")
                        .WithMany("Messages")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ApiKey", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Member", "Owner")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AuditEventBase", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "ActorMember")
                        .WithMany()
                        .HasForeignKey("ActorMemberId");

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany("Activity")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorMember");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Conversation", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId");

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany("Conversations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "StartedBy")
                        .WithMany()
                        .HasForeignKey("StartedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("Organization");

                    b.Navigation("Room");

                    b.Navigation("StartedBy");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationEvent", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", "Conversation")
                        .WithMany("Events")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationLink", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", "Conversation")
                        .WithMany("Links")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("CreatedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationMember", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ConversationTag", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", "Conversation")
                        .WithMany("Tags")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Tag", "Tag")
                        .WithMany("Conversations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Creator");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Form", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Hub", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.HubRoutingRule", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Hub", "Hub")
                        .WithMany("RoutingRules")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany("RoutingRules")
                        .HasForeignKey("RoomId");

                    b.Navigation("Hub");

                    b.Navigation("Organization");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Integration", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany("Integrations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.LinkedIdentity", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Member", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Serious.Abbot.Scripting.WorkingHours", "WorkingHours", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("integer");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.Navigation("Organization");

                    b.Navigation("User");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MemberFact", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "Subject")
                        .WithMany("Facts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MemberRole", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany("MemberRoles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Role", "Role")
                        .WithMany("MemberRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Memory", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MetadataField", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MetricObservation", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Organization");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Organization", b =>
                {
                    b.OwnsOne("Serious.Abbot.Scripting.Threshold<System.TimeSpan>", "DefaultTimeToRespond", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("integer");

                            b1.Property<TimeSpan?>("Deadline")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan?>("Warning")
                                .HasColumnType("interval");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("Serious.Abbot.Entities.TrialPlan", "Trial", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Expiry")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Plan")
                                .HasColumnType("integer");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("DefaultTimeToRespond")
                        .IsRequired();

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Package", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithOne("Package")
                        .HasForeignKey("Serious.Abbot.Entities.Package", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.PackageVersion", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Permission", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Member");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Room", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany("Rooms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Serious.Abbot.Scripting.Threshold<System.TimeSpan>", "TimeToRespond", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .HasColumnType("integer");

                            b1.Property<TimeSpan?>("Deadline")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan?>("Warning")
                                .HasColumnType("interval");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("Organization");

                    b.Navigation("TimeToRespond")
                        .IsRequired();
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomAssignment", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Member", "Member")
                        .WithMany("RoomAssignments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany("Assignments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Member");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomLink", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Member", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany("Links")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Organization");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.RoomMetadataField", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.MetadataField", "MetadataField")
                        .WithMany("RoomMetadataFields")
                        .HasForeignKey("MetadataFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Room", "Room")
                        .WithMany("Metadata")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("MetadataField");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Setting", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SignalSubscription", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("SignalSubscriptions")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Skill", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany("Skills")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.PackageVersion", "SourcePackageVersion")
                        .WithMany("InstalledSkills")
                        .HasForeignKey("SourcePackageVersionId");

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("SourcePackageVersion");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillData", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("Data")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillPattern", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("Patterns")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillSecret", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("Secrets")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillTrigger", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("Triggers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.SkillVersion", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Skill", "Skill")
                        .WithMany("Versions")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Tag", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UserList", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UserListEntry", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.UserList", "List")
                        .WithMany("Entries")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serious.Abbot.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("List");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.AttachedToHubEvent", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.ExternalLinkEvent", b =>
                {
                    b.HasOne("Serious.Abbot.Entities.ConversationLink", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Announcement", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Conversation", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Links");

                    b.Navigation("Members");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Hub", b =>
                {
                    b.Navigation("RoutingRules");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Member", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Facts");

                    b.Navigation("MemberRoles");

                    b.Navigation("RoomAssignments");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.MetadataField", b =>
                {
                    b.Navigation("RoomMetadataFields");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Organization", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("Integrations");

                    b.Navigation("Members");

                    b.Navigation("Rooms");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.PackageVersion", b =>
                {
                    b.Navigation("InstalledSkills");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Role", b =>
                {
                    b.Navigation("MemberRoles");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Room", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Conversations");

                    b.Navigation("Links");

                    b.Navigation("Metadata");

                    b.Navigation("RoutingRules");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Skill", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Package");

                    b.Navigation("Patterns");

                    b.Navigation("Secrets");

                    b.Navigation("SignalSubscriptions");

                    b.Navigation("Triggers");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.Tag", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.User", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Serious.Abbot.Entities.UserList", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
